name: Build and Deploy

on:
  workflow_call:
    inputs:
      tf_dir:
        type: string
        description: 'The directory of the Terraform code'
        default: 'tf'
        
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "us-east-1"
      REPO_NAME: ${{ github.event.repository.name }}
      TF_DIR: "tf"

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Environment and ECR Repository
        id: set_env_ecr
        run: |
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "ENV=prod" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=${REPO_NAME}_prod" >> $GITHUB_ENV
            echo "BACKEND_CONFIG=backend-prod.tfbackend" >> $GITHUB_ENV
          else
            echo "ENV=staging" >> $GITHUB_ENV
            echo "ECR_REPOSITORY=${REPO_NAME}_staging" >> $GITHUB_ENV
            echo "BACKEND_CONFIG=backend-staging.tfbackend" >> $GITHUB_ENV
          fi

      - name: Set IMAGE_TAG
        run: |
          SHORT_SHA=${GITHUB_SHA:0:7}
          echo "IMAGE_TAG=${SHORT_SHA}" >> $GITHUB_ENV

      # Step 3: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --name kom-${{env.ENV}}-eks-cluster --region ${{ env.AWS_REGION }}

      # Step 4: Set Up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host

      # Step 5: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      # Step 6: Build and Push Docker Image using Buildx with Caching
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile.${{ env.ENV }}
          push: true
          tags: ${{ steps.ecr-login.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Step 7: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ">=1.5.0"

      # Step 8: Terraform Init
      - name: Terraform Init
        run: terraform init -var env=${{ env.ENV }} -backend-config=${{ env.BACKEND_CONFIG }}
        working-directory: ./${{ env.TF_DIR }}

      # Step 9: Terraform Plan
      - name: Terraform Plan
        run: terraform plan -out=tfplan -var "env=${{ env.ENV }}" -var "image_tag=${{ env.IMAGE_TAG }}"
        working-directory: ./${{ env.TF_DIR }}

      # Step 10: Terraform Apply (only on push to main or staging)
      - name: Terraform Apply
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')
        run: terraform apply -auto-approve tfplan
        working-directory: ./${{ env.TF_DIR }}
